
import { useCallback } from 'react';
import { DominoPieceType } from '@/types/game';
import { toast } from 'sonner';
import { canPieceConnect, extractBoardEnds } from '@/utils/standardPieceValidation';

interface UseSimpleGameHandlersProps {
  gameState: any;
  currentUserPlayer: any;
  isMyTurn: boolean;
  isProcessingMove: boolean;
  playPiece: (piece: DominoPieceType) => void;
  passTurn: () => void;
  playAutomatic?: () => void;
}

export const useSimpleGameHandlers = ({
  gameState,
  currentUserPlayer,
  isMyTurn,
  isProcessingMove,
  playPiece,
  passTurn,
  playAutomatic
}: UseSimpleGameHandlersProps) => {
  
  const canPiecePlay = useCallback((piece: DominoPieceType): boolean => {
    try {
      const boardEnds = extractBoardEnds(gameState.board_state);
      return canPieceConnect({ top: piece.top, bottom: piece.bottom }, boardEnds);
    } catch (error) {
      console.error('Erro ao verificar jogabilidade da pe√ßa:', error);
      return false;
    }
  }, [gameState.board_state]);

  const handlePassClick = useCallback(() => {
    if (!isMyTurn || isProcessingMove || !currentUserPlayer) return;
    
    const hasPlayablePiece = currentUserPlayer.pieces?.some(canPiecePlay) || false;

    if (hasPlayablePiece) {
      toast.error("Voc√™ tem pe√ßas jog√°veis e n√£o pode passar a vez.");
      return;
    }
    
    console.log('üë§ Passando a vez manualmente');
    passTurn();
  }, [isMyTurn, isProcessingMove, currentUserPlayer, canPiecePlay, passTurn]);

  const handleAutoPlay = useCallback(() => {
    if (!isMyTurn || isProcessingMove) {
        toast.warning("Aguarde, n√£o √© sua vez ou uma jogada est√° em processamento.");
        return;
    }
    
    if (playAutomatic) {
      console.log('ü§ñ Iniciando jogada autom√°tica por timeout de 10 segundos');
      toast.info("‚è∞ Tempo esgotado - executando jogada autom√°tica...", {
        duration: 2000
      });
      playAutomatic();
    } else {
      toast.error("Fun√ß√£o de jogada autom√°tica n√£o dispon√≠vel no momento.");
    }
  }, [isMyTurn, isProcessingMove, playAutomatic]);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    
    if (!isMyTurn || isProcessingMove) {
      toast.warning("Aguarde, processando jogada anterior ou n√£o √© sua vez.");
      return;
    }

    try {
      const pieceJSON = e.dataTransfer.getData('application/json');
      if (!pieceJSON) {
        console.warn('Dropped item has no "application/json" data.');
        return;
      }
      
      const piece = JSON.parse(pieceJSON) as DominoPieceType;
      
      if (!piece || typeof piece.top !== 'number' || typeof piece.bottom !== 'number' || !piece.id) {
          toast.error("Dados da pe√ßa inv√°lidos ou corrompidos.");
          return;
      }
      
      console.log('üéØ Jogando pe√ßa por drag&drop:', piece);
      playPiece(piece);

    } catch (error) {
      console.error('Erro ao processar o drop da pe√ßa:', error);
      toast.error('Ocorreu um erro ao soltar a pe√ßa.');
    }
  }, [isMyTurn, isProcessingMove, playPiece]);

  return {
    canPiecePlay,
    handleAutoPlay,
    handleDragOver,
    handleDrop,
    handlePassClick,
  };
};
