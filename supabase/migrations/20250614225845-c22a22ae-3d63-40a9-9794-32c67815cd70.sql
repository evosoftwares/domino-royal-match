
-- LIMPEZA FINAL DAS POL√çTICAS RLS RESTANTES (VERS√ÉO CORRIGIDA)
-- Remove todas as pol√≠ticas RLS sem modificar pg_class diretamente

DO $$
DECLARE
    policy_record RECORD;
    total_policies_before integer;
    total_policies_after integer;
    table_record RECORD;
BEGIN
    -- Contar pol√≠ticas antes da limpeza
    SELECT COUNT(*) INTO total_policies_before
    FROM pg_policies 
    WHERE schemaname = 'public';
    
    RAISE NOTICE 'üßπ INICIANDO LIMPEZA FINAL DE POL√çTICAS RLS (VERS√ÉO SEGURA)';
    RAISE NOTICE 'üìä Pol√≠ticas encontradas antes da limpeza: %', total_policies_before;
    
    -- Remover TODAS as pol√≠ticas RLS restantes, independente do nome
    FOR policy_record IN 
        SELECT tablename, policyname 
        FROM pg_policies 
        WHERE schemaname = 'public'
    LOOP
        RAISE NOTICE 'üóëÔ∏è Removendo pol√≠tica: % da tabela %', policy_record.policyname, policy_record.tablename;
        EXECUTE format('DROP POLICY IF EXISTS %I ON public.%I', policy_record.policyname, policy_record.tablename);
    END LOOP;
    
    -- Usar ALTER TABLE para desabilitar RLS (m√©todo seguro)
    FOR table_record IN 
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        AND table_name IN ('games', 'game_players', 'matchmaking_queue', 'profiles', 'transactions', 'player_presence', 'game_rooms')
    LOOP
        RAISE NOTICE 'üîì Desabilitando RLS na tabela: %', table_record.table_name;
        EXECUTE format('ALTER TABLE public.%I DISABLE ROW LEVEL SECURITY', table_record.table_name);
    END LOOP;
    
    -- Contar pol√≠ticas ap√≥s a limpeza
    SELECT COUNT(*) INTO total_policies_after
    FROM pg_policies 
    WHERE schemaname = 'public';
    
    RAISE NOTICE 'üîç VERIFICA√á√ÉO FINAL COMPLETA:';
    RAISE NOTICE 'üìä Pol√≠ticas antes: % | Pol√≠ticas depois: %', total_policies_before, total_policies_after;
    
    -- Verificar status RLS de cada tabela
    FOR table_record IN 
        SELECT t.table_name,
               CASE WHEN c.relrowsecurity THEN 'HABILITADO' ELSE 'DESABILITADO' END as rls_status
        FROM information_schema.tables t
        JOIN pg_class c ON c.relname = t.table_name
        JOIN pg_namespace n ON c.relnamespace = n.oid
        WHERE t.table_schema = 'public' 
        AND t.table_type = 'BASE TABLE'
        AND n.nspname = 'public'
        AND t.table_name IN ('games', 'game_players', 'matchmaking_queue', 'profiles', 'transactions', 'player_presence', 'game_rooms')
    LOOP
        RAISE NOTICE 'üìã Tabela % - RLS: %', table_record.table_name, table_record.rls_status;
    END LOOP;
    
    IF total_policies_after = 0 THEN
        RAISE NOTICE '‚úÖ ‚úÖ ‚úÖ SISTEMA COMPLETAMENTE LIMPO! ‚úÖ ‚úÖ ‚úÖ';
        RAISE NOTICE 'üöÄ Zero pol√≠ticas RLS restantes';
        RAISE NOTICE 'üéØ RLS desabilitado em todas as tabelas principais';
        RAISE NOTICE 'üìà Performance otimizada ao m√°ximo';
        RAISE NOTICE 'üîì Acesso completo aos dados liberado';
        RAISE NOTICE 'üéÆ Sistema de matchmaking pronto para uso otimizado!';
    ELSE
        RAISE NOTICE '‚ùå ATEN√á√ÉO: % pol√≠ticas ainda permanecem ativas', total_policies_after;
        
        -- Listar pol√≠ticas restantes para debug
        FOR policy_record IN 
            SELECT tablename, policyname 
            FROM pg_policies 
            WHERE schemaname = 'public'
        LOOP
            RAISE NOTICE '‚ö†Ô∏è Pol√≠tica restante: % na tabela %', policy_record.policyname, policy_record.tablename;
        END LOOP;
    END IF;
END $$;
